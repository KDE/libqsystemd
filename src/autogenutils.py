# Some helper functions for the various autogeneration scripts here.
# Copyright 2011 Stefan Majewsky <majewsky@gmx.net>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

def parseJSONCommandLine():
    """ Parses a commandline for simple json->h,cpp converters (i.e. one
        JSON file is read, and one pair of h/cpp files is generated).
        This will sys.exit() if the command line is malformed.

        Returns a pair of JSON filename and output basename.
    """
    import sys
    if len(sys.argv) != 3:
        w = sys.stderr.write
        w("Error: Expected 2, got %i arguments.\n" % (len(sys.argv) - 1))
        w("Syntax: %s [input file] [output basename]\n" % (sys.argv[0]))
        sys.exit(1)
    import os
    return [os.path.abspath(x) for x in sys.argv[1:]]

def parseJSONFile(filename):
    """ Opens the given file, and reads a JSON object from it.
        In addition to the standard JSON syntax, lines starting
        with "#" are treated as comments.
    """
    doc = open(filename).readlines()
    doc = "".join([x for x in doc if not x.startswith('#')])
    import json
    return json.JSONDecoder().decode(doc)

def autogenWarning(file, editInsteadPath):
    """ Writes to the given file object a warning that this file is generated,
        and refers to the file at editInsteadPath for editing purposes.
    """
    file.write("// WARNING: This file is autogenerated. Edit instead:\n")
    file.write("// " + editInsteadPath + "\n")

def beginIncludeGuard(file, filename):
    """ Writes to file (a file object for the file with the name given as the
        second argument) the begin of an include guard. Remember to put #endif
        at the end of the file.
    """
    import re
    guardDefine = re.sub("[-/.]", "_", filename.upper())
    file.write("#ifndef " + guardDefine + "\n")
    file.write("#define " + guardDefine + "\n")
