/***************************************************************************
 *   Copyright 2011 Stefan Majewsky <majewsky@gmx.net>                     *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Library General Public License          *
 *   version 2 as published by the Free Software Foundation                *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Library General Public License for more details.                  *
 *                                                                         *
 *   You should have received a copy of the GNU Library General Public     *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.         *
 ***************************************************************************/

#include "device_p.h"

static QsdUnit::Type typeFromUnitName(const QString& id)
{
	return QsdUnitType::fromString(id.section(QChar('.'), -1));
}

void QsdUnitPrivate::populateWithUnitListEntry(const QsdPrivate::UnitListEntry& ule)
{
	//the code generated by STORE operates on d->m_data, which needs to be this->m_data
	QsdUnitPrivate* const d = this;

	#auto STORE id ule.id
	#auto STORE description ule.description
	#auto STORE activeState QsdActiveState::fromString(ule.active_state)
	#auto STORE loadState QsdLoadState::fromString(ule.load_state)
	#auto STORE type typeFromUnitName(ule.id)
}

QsdUnit::QsdUnit(QsdUnitPrivate* d_ptr)
	: d_ptr(d_ptr)
{
}

QsdUnit::~QsdUnit()
{
}

struct QsdPrivate::Factory
{
	template<typename T> static QsdUnit* instantiate(const QsdPrivate::DBusRef& ref)
	{
		return new T(new typename T::Private(ref));
	}
};

/*static*/ QsdUnit* QsdUnit::instantiate(const QString& id, const QsdPrivate::DBusRef& ref)
{
	typedef QsdUnit* (*UnitFactory)(const QsdPrivate::DBusRef&);
	UnitFactory factories[] = { //WARNING: offset of 1 to QsdUnit::Type, see usage!
		&QsdPrivate::Factory::instantiate<QsdUnit>,
		&QsdPrivate::Factory::instantiate<QsdUnit>, // service
		&QsdPrivate::Factory::instantiate<QsdUnit>, // socket
		&QsdPrivate::Factory::instantiate<QsdUnit>, // target
		&QsdPrivate::Factory::instantiate<QsdDevice>,
		&QsdPrivate::Factory::instantiate<QsdUnit>, // mount
		&QsdPrivate::Factory::instantiate<QsdUnit>, // automount
		&QsdPrivate::Factory::instantiate<QsdUnit>, // snapshot
		&QsdPrivate::Factory::instantiate<QsdUnit>, // timer
		&QsdPrivate::Factory::instantiate<QsdUnit>, // swap
		&QsdPrivate::Factory::instantiate<QsdUnit>, // path
	};
	//find type
	const QsdUnit::Type type = typeFromUnitName(id);
	return factories[type + 1](ref);
}
